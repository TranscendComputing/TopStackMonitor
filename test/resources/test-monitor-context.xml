<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:oxm="http://www.springframework.org/schema/oxm"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:lang="http://www.springframework.org/schema/lang"
    xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:rabbit="http://www.springframework.org/schema/rabbit"
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-2.5.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
        http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.0.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.0.xsd
        http://www.springframework.org/schema/rabbit
        http://www.springframework.org/schema/rabbit/spring-rabbit-1.0.xsd">
	<!-- ============================== 	-->
    <context:component-scan base-package="com.msi.tough.monitor" />

    <bean id="servicesPropertyConfigurer"
        class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
        <property name="ignoreUnresolvablePlaceholders" value="false" />
        <property name="locations">
                <list>
                        <value>classpath*:/*.properties</value>
                </list>
        </property>
    </bean>

    <bean id="accessKey" class="java.lang.String">
        <constructor-arg value="${test.accessKey}"/>
    </bean>

    <bean id="secretKey" class="java.lang.String">
        <constructor-arg value="${test.secretKey}"/>
    </bean>

    <bean id="virtConnector" class="com.msi.tough.monitor.connector.platform.VirtConnector" factory-method="setConnectFlags">
        <constructor-arg value="1"/>
    </bean>

    <bean id="testHypervisor" class="java.lang.String">
        <constructor-arg value="msicloud4.momentumsoftware.com"></constructor-arg>
    </bean>

    <bean id="testXenHypervisor" class="java.lang.String">
        <constructor-arg value="msicloud2.momentumsoftware.com"></constructor-arg>
    </bean>

    <bean id="hypervisorOptions" class="java.lang.String">
        <constructor-arg value="msicloud4.momentumsoftware.com"></constructor-arg>
    </bean>

    <util:map id="connectionOptions">
        <!-- This is the default for Unix, but OSX/Windows expect different -->
        <entry key="socket" value="/var/run/libvirt/libvirt-sock"></entry>
    </util:map>

    <!-- hibernate configurations -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory" />
    </bean>

    <bean id="sessionFactory"
        class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
        <property name="dataSource" ref="testConnection" />
        <property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
        <property name="configurationClass" value="org.hibernate.cfg.AnnotationConfiguration"></property>
        <!-- The unit tests are running an with a spring session context,  -->
        <!-- so transactions are automatic with @Transactional; this is    -->
        <!-- different than production, but avoids having to use explicit  -->
        <!-- transactions inside tests, and allows tests to roll back.     -->
        <property name="hibernateProperties">
            <value>hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
                hibernate.cache.provider_class=org.hibernate.cache.NoCacheProvider
                hibernate.current_session_context_class=org.springframework.orm.hibernate3.SpringSessionContext
                hibernate.show_sql=false
                hibernate.hbm2ddl.auto=update
            </value>
        </property>
    </bean>

    <bean id="DB_URL" class="java.lang.String">
        <constructor-arg value="jdbc:mysql://localhost:3306/msi?autoReconnect=true"></constructor-arg>
    </bean>
    <bean id="BIND_DB_URL" class="java.lang.String">
        <constructor-arg value="jdbc:mysql://localhost:3306/bind?autoReconnect=true"></constructor-arg>
    </bean>
    <bean id="DB_USERNAME" class="java.lang.String">
        <constructor-arg value="msi"></constructor-arg>
    </bean>
    <bean id="DB_PASSWORD" class="java.lang.String">
        <constructor-arg value="${db.password}"></constructor-arg>
    </bean>

    <bean id="testConnection" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" ref="DB_URL" />
        <property name="username" ref="DB_USERNAME" />
        <property name="password" ref="DB_PASSWORD" />
        <property name="defaultAutoCommit" value="false"></property>
        <property name="initialSize" value="1"></property>
        <property name="maxActive" value="5"></property>
        <property name="testWhileIdle" value="false"></property>
        <property name="testOnBorrow" value="false"></property>
        <property name="testOnReturn" value="false"></property>
        <property name="validationQuery" value="SELECT 1"></property>
        <property name="timeBetweenEvictionRunsMillis" value="-1"></property>
        <property name="minIdle" value="0"></property>
        <property name="maxWait" value="5000"></property>
        <property name="removeAbandoned" value="false"></property>
    </bean>

    <!-- Beans to support testing Monitor agents -->
    <rabbit:connection-factory id="queueConnectionFactory" host="chef-svr.momentumsoftware.com" port="5672"
    virtual-host="/monitor" username="transcend" password="transcend" />

    <rabbit:admin connection-factory="queueConnectionFactory"/>

    <rabbit:queue id="agent-queue" />

    <fanout-exchange name="amq.fanout" xmlns="http://www.springframework.org/schema/rabbit">
        <bindings>
            <binding queue="agent-queue" />
        </bindings>
    </fanout-exchange>

    <bean id="jsonConverter" class="org.springframework.amqp.support.converter.JsonMessageConverter">
        <property name="classMapper">
            <bean class="org.springframework.amqp.support.converter.DefaultClassMapper">
                <property name="defaultType"
                    value="java.util.ArrayList" />
            </bean>
        </property>
    </bean>

    <rabbit:listener-container connection-factory="queueConnectionFactory" message-converter="jsonConverter">
        <rabbit:listener queues="agent-queue" ref="messageAgentReceiver" method="onAgentMessage"/>
    </rabbit:listener-container>

    <bean id="messageAgentReceiver" class="com.msi.tough.monitor.connector.receive.CollectDAgentReceiver"></bean>

    <bean id="measurehandler" class="com.msi.tough.monitor.common.manager.RDBMSMeasureHandler"></bean>

    <bean id="dimensionHelper" class="com.msi.tough.monitor.common.model.helper.DimensionHelper"></bean>

    <bean id="agentMessageFactory" class="com.msi.tough.monitor.connector.receive.AgentMessageFactory"></bean>
</beans>
